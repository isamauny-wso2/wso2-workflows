name: Reusable workflow for building and releasing WSO2 APIM Policy repo

on:
  workflow_call: {}

env:
  GIT_ORG: wso2-cicd
  GIT_CICD_REPO: wso2-pipeline
  GIT_CD_BRANCH: dev
  INITIAL_VERSION: v1.0
  MAX_MINOR_VERSION: 9
  GIT_BOT_USERNAME: ${{ secrets.WSO2_GIT_BOT_USERNAME }}
  GIT_BOT_EMAIL: ${{ secrets.WSO2_GIT_BOT_EMAIL }}
  GIT_BOT_PAT: ${{ secrets.WSO2_GIT_BOT_PAT }}
       
jobs:
  build_and_release_apim_policy:
    name: Build and Release WSO2 APIM Policy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Extract repository name
        run: echo "CURRENT_REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV

      - name: Fetch PR metadata
        uses: 8BitJonny/gh-get-current-pr@2.1.3
        id: pr

      - name: Zip src folder under repo name
        run: |
          mkdir -p $CURRENT_REPO_NAME
          mv src $CURRENT_REPO_NAME/
          zip -r $CURRENT_REPO_NAME.zip  $CURRENT_REPO_NAME/src

      - name: Create GitHub Release
        id: release
        run: |
          echo "${{ env.GIT_BOT_PAT }}" | gh auth login --with-token
          current_version=$(gh release view --repo $GITHUB_REPOSITORY --json tagName --jq '.tagName' || true)

          if [ -z $current_version ]; then
            new_version=${{env.INITIAL_VERSION}}
          else
            # Extract major and minor version components
            major_version=$(echo $current_version | cut -d '.' -f 1 | tr -d 'v')
            minor_version=$(echo $current_version | cut -d '.' -f 2)

            # Increment the minor version
            ((++minor_version))

            # Check if the minor version exceeds the max minor version
            if [ $minor_version -gt ${{env.MAX_MINOR_VERSION}} ]; then
                # Reset minor version to 0 and increment major version
                minor_version=0
                ((++major_version))
            fi

            new_version="v${major_version}.${minor_version}"
          fi
          
          echo "New version: $new_version"

          release_notes="Release notes for version $new_version
          - Pull Request Title: ${{steps.pr.outputs.pr_url}}
          - Pull Request: ${{steps.pr.outputs.pr_title}}
          - Pull Request Merged At: ${{steps.pr.outputs.pr_merged_at}}
          "

          # Release the Packs
          gh release create $new_version --title "$CURRENT_REPO_NAME - $new_version" --notes "$release_notes"

          # Release the APIM Pack
          gh release upload $new_version  $CURRENT_REPO_NAME.zip
          
          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

      - name: Update Central CD Config
        run: |
          mkdir apim-cd
          cd apim-cd

          git config --global user.email "${{ env.GIT_BOT_EMAIL }}"
          git config --global user.name "${{env.GIT_BOT_USERNAME}}"
          git clone https://${{env.GIT_BOT_USERNAME}}:${{ env.GIT_BOT_PAT }}@github.com/${{env.GIT_ORG}}/${{env.GIT_CICD_REPO}} --branch ${{env.GIT_CD_BRANCH}} --single-branch
          
          cd ${{env.GIT_CICD_REPO}}

          pr_url=${{steps.pr.outputs.pr_url}}
          pr_title="${{steps.pr.outputs.pr_title}}"
          pr_merged_at="${{steps.pr.outputs.pr_merged_at}}"

          releaseFilePath="apim/policies/mediation/$CURRENT_REPO_NAME/release.json"
          releaseFile=$releaseFilePath

          new_version=${{steps.release.outputs.NEW_VERSION}}

          # Read the JSON file and update the details
          updated_json=$(jq '
              .releaseVersion = "'"$new_version"'" |
              .pullRequest.url = "'"${{steps.pr.outputs.pr_url}}"'" |
              .pullRequest.title = "'"${{steps.pr.outputs.pr_title}}"'" |
              .pullRequest.mergedAt = "'"${{steps.pr.outputs.pr_merged_at}}"'"
            ' "$releaseFile")

          echo "$updated_json" > "$releaseFile"

          git add "$releaseFilePath"
          git commit -m "[CD] [Dev] [APIM-Policy] [$CURRENT_REPO_NAME] [$new_version]"
          git push origin ${{env.GIT_CD_BRANCH}}
