name: Reusable workflow for building and releasing WSO2 APIM API repo

on:
  workflow_call: {}

env:
  GIT_ORG: wso2-cicd

  GIT_CICD_REPO: wso2-pipeline
  GIT_CI_BRANCH: main
  GIT_CD_BRANCH: dev
  INITIAL_VERSION: v1.0
  MAX_MINOR_VERSION: 9
  GIT_BOT_USERNAME: ${{ secrets.WSO2_GIT_BOT_USERNAME }}
  GIT_BOT_EMAIL: ${{ secrets.WSO2_GIT_BOT_EMAIL }}
  GIT_BOT_PAT: ${{ secrets.WSO2_GIT_BOT_PAT }}
       
jobs:
  build_and_release_apim_api:
    name: Build and Release WSO2 APIM API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Extract Repository Name
        run: echo "CURRENT_REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV

      - name: Get PR Metadata
        uses: 8BitJonny/gh-get-current-pr@2.1.3
        id: pr

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'maven'

      - name: Detect Changed API Versions
        id: detect_versions
        run: |
          changed_apim_versions=($(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'apim/' | cut -f 2 -d '/' | grep -v 'assembly' | grep -v 'pom.xml' | uniq))
          # Join array elements with a delimiter (comma)
          changed_apim_versions_str=$(IFS=,; echo "${changed_apim_versions[*]}")
          echo "changed_apim_versions=${changed_apim_versions_str}" >> $GITHUB_OUTPUT
          echo "changed_apim_versions: ${changed_apim_versions_str}"

      - name: Build API Artifacts
        run: |
          mvn clean install -Dmaven.test.skip=true --file apim/pom.xml
          
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          gh version

      - name: Create GitHub Release and Upload Artifact
        id: release
        run: |
          echo "${{ env.GIT_BOT_PAT }}" | gh auth login --with-token
          current_version=$(gh release view --repo $GITHUB_REPOSITORY --json tagName --jq '.tagName' || true)

          if [ -z $current_version ]; then
            echo "No releases found."
            new_version=${{env.INITIAL_VERSION}}
          else
            echo "Current version: $current_version"

            # Extract major and minor version components
            major_version=$(echo $current_version | cut -d '.' -f 1 | tr -d 'v')
            minor_version=$(echo $current_version | cut -d '.' -f 2)

            echo "Current major version: $major_version"
            echo "Current minor version: $minor_version"

            # Increment the minor version
            ((++minor_version))

            echo "Next minor version: $minor_version"

            # Check if the minor version exceeds the max minor version
            if [ $minor_version -gt ${{env.MAX_MINOR_VERSION}} ]; then
                # Reset minor version to 0 and increment major version
                echo "Minor version exceeded ${{env.MAX_MINOR_VERSION}}. Resetting to 0 and incrementing major version."
                minor_version=0
                ((++major_version))
                echo "Next major version: $major_version"
            fi

            # Create the new version string
            new_version="v${major_version}.${minor_version}"
          fi
          
          # Print the new version
          echo "New version: $new_version"

          pr_url=${{steps.pr.outputs.pr_url}}
          pr_title="${{steps.pr.outputs.pr_title}}"
          pr_merged_at="${{steps.pr.outputs.pr_merged_at}}"

          release_notes="Release notes for version $new_version
          - Pull Request Title: $pr_title
          - Pull Request: $pr_url
          - Pull Request Merged At: $pr_merged_at
          "

          # Release the Packs
          gh release create $new_version --title "$CURRENT_REPO_NAME - $new_version" --notes "$release_notes"

          # Release the APIM Pack
          gh release upload $new_version  apim/target/*.zip
          
          echo "Artifacts uploaded to GitHub release."

          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

      - name: Update Central CD Config
        run: |
          changed_apim_versions_str="${{ steps.detect_versions.outputs.changed_apim_versions }}"
          echo "changed_apim_versions: $changed_apim_versions_str"

          # Split the string back into an array
          IFS=',' read -ra changed_apim_versions <<< "$changed_apim_versions_str"

          echo "changed_apim_versions: ${changed_apim_versions[@]}"
          
          mkdir apim-cd
          cd apim-cd

          git config --global user.email "${{ env.GIT_BOT_EMAIL }}"
          git config --global user.name "${{env.GIT_BOT_USERNAME}}"
          git clone https://${{env.GIT_BOT_USERNAME}}:${{ env.GIT_BOT_PAT }}@github.com/${{env.GIT_ORG}}/${{env.GIT_CICD_REPO}} --branch ${{env.GIT_CD_BRANCH}} --single-branch
          
          cd ${{env.GIT_CICD_REPO}}

          pr_url=${{steps.pr.outputs.pr_url}}
          pr_title="${{steps.pr.outputs.pr_title}}"
          pr_merged_at="${{steps.pr.outputs.pr_merged_at}}"

          for changed_apim_version in "${changed_apim_versions[@]}"; do

            echo "changed_apim_version: $changed_apim_version"
            config_file_path="apim/apis/$CURRENT_REPO_NAME/$changed_apim_version/config.json"
            json_file=$config_file_path
  
            cat "$json_file"
  
            new_version=${{steps.release.outputs.NEW_VERSION}}
  
            # Read the JSON file and update the details
            updated_json=$(jq '
                .release_version = "'"$new_version"'" |
                .pull_request = "'"$pr_url"'" |
                .pull_request_title = "'"$pr_title"'" |
                .pull_request_merged_at = "'"$pr_merged_at"'"
              ' "$json_file")
  
            echo "$updated_json" > "$json_file"
  
            cat "$json_file"
  
            git add "$config_file_path"
          done

          git commit -m "[CD] [Dev] [APIM-API] [$CURRENT_REPO_NAME-$changed_apim_versions_str] [$new_version]"
          git push origin ${{env.GIT_CD_BRANCH}}